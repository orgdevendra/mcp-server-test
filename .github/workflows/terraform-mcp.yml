# This GitHub Actions workflow demonstrates how to use the HashiCorp Terraform MCP Server (Docker) for a full IaC workflow.
# It runs on every push to main, and on pull requests for validation.
# Adjust the paths, secrets, and environment variables as needed for your project.

name: Terraform MCP Server CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  terraform:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        env_folder: [dev] # Add 'prod' to this list to deploy prod as well
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      TF_RESOURCE_GROUP_NAME: ${{ secrets.TF_RESOURCE_GROUP_NAME }}
      TF_LOCATION: ${{ secrets.TF_LOCATION }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Prepare Terraform State Directory
        run: mkdir -p ${{ github.workspace }}/tfstate

      - name: Terraform Init
        run: |
          docker run --rm \
            -e ARM_CLIENT_ID \
            -e ARM_CLIENT_SECRET \
            -e ARM_SUBSCRIPTION_ID \
            -e ARM_TENANT_ID \
            -v ${{ github.workspace }}/environments/${{ matrix.env_folder }}:/src \
            -v ${{ github.workspace }}/tfstate:/workspace \
            -w /workspace \
            hashicorp/terraform:latest -chdir=/src init -input=false

      - name: Terraform Import Resource Group (if exists)
        run: |
          docker run --rm \
            -e ARM_CLIENT_ID \
            -e ARM_CLIENT_SECRET \
            -e ARM_SUBSCRIPTION_ID \
            -e ARM_TENANT_ID \
            -e TF_RESOURCE_GROUP_NAME \
            -e TF_LOCATION \
            -v ${{ github.workspace }}/environments/${{ matrix.env_folder }}:/src \
            -v ${{ github.workspace }}/tfstate:/workspace \
            -w /workspace \
            hashicorp/terraform:latest -chdir=/src import azurerm_resource_group.keyvault_rg "$TF_RESOURCE_GROUP_NAME" || true

      - name: Terraform Plan
        run: |
          docker run --rm \
            -e ARM_CLIENT_ID \
            -e ARM_CLIENT_SECRET \
            -e ARM_SUBSCRIPTION_ID \
            -e ARM_TENANT_ID \
            -v ${{ github.workspace }}/environments/${{ matrix.env_folder }}:/src \
            -v ${{ github.workspace }}/tfstate:/workspace \
            -w /workspace \
            hashicorp/terraform:latest -chdir=/src plan -input=false -out=tfplan \
            -var 'resource_group_resource={name="${{ secrets.TF_RESOURCE_GROUP_NAME }}",location="${{ secrets.TF_LOCATION }}"}' \
            -var 'storage_account_resource={name="${{ secrets.TF_STORAGE_ACCOUNT_NAME }}",location="${{ secrets.TF_LOCATION }}",account_tier="Standard",account_replication_type="LRS"}' \
            -var 'key_vault_resource={name="${{ secrets.TF_KEY_VAULT_NAME }}",location="${{ secrets.TF_LOCATION }}",tenant_id="${{ secrets.TF_TENANT_ID }}",sku_name="standard",soft_delete_retention_days=7,purge_protection_enabled=true}' \
            -var 'app_service_plan_resource={name="${{ secrets.TF_APP_SERVICE_PLAN_NAME }}",location="${{ secrets.TF_LOCATION }}",os_type="Linux",sku_name="P1v2"}' \
            -var 'web_app_resource={name="${{ secrets.TF_WEB_APP_NAME }}",location="${{ secrets.TF_LOCATION }}",service_plan_id=""}'

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          docker run --rm \
            -e ARM_CLIENT_ID \
            -e ARM_CLIENT_SECRET \
            -e ARM_SUBSCRIPTION_ID \
            -e ARM_TENANT_ID \
            -v ${{ github.workspace }}/environments/${{ matrix.env_folder }}:/src \
            -v ${{ github.workspace }}/tfstate:/workspace \
            -w /workspace \
            hashicorp/terraform:latest -chdir=/src apply -input=false -auto-approve tfplan

      - name: Upload Terraform Plan as Artifact (optional)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: tfplan
