# This GitHub Actions workflow demonstrates how to use the HashiCorp Terraform MCP Server (Docker) for a full IaC workflow.
# It runs on every push to main, and on pull requests for validation.
# Adjust the paths, secrets, and environment variables as needed for your project.

name: Terraform MCP Server CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  terraform:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        env_folder: [dev] # Add 'prod' to this list to deploy prod as well
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      TF_RESOURCE_GROUP_NAME: ${{ secrets.TF_RESOURCE_GROUP_NAME }}
      TF_LOCATION: ${{ secrets.TF_LOCATION }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Prepare Terraform State Directory
        run: mkdir -p ${{ github.workspace }}/tfstate

      - name: Terraform Init
        run: |
          docker run --rm \
            -e ARM_CLIENT_ID \
            -e ARM_CLIENT_SECRET \
            -e ARM_SUBSCRIPTION_ID \
            -e ARM_TENANT_ID \
            -v ${{ github.workspace }}/environments/${{ matrix.env_folder }}:/src \
            -v ${{ github.workspace }}/tfstate:/workspace \
            -w /workspace \
            hashicorp/terraform:latest -chdir=/src init -input=false

      - name: Terraform Import All Existing Resources
        run: |
          # Import Resource Group for AVM module if it exists
          terraform state show 'module.resource_group.azurerm_resource_group.this' || terraform import 'module.resource_group.azurerm_resource_group.this' "/subscriptions/${{ env.ARM_SUBSCRIPTION_ID }}/resourceGroups/rg-avm-290625" || true
          # Import Key Vault if it exists
          terraform state show azurerm_key_vault.prod || terraform import azurerm_key_vault.prod "/subscriptions/${{ env.ARM_SUBSCRIPTION_ID }}/resourceGroups/${{ env.TF_RESOURCE_GROUP_NAME }}/providers/Microsoft.KeyVault/vaults/${{ secrets.TF_KEY_VAULT_NAME }}" || true
          # Import Storage Account if it exists
          terraform state show azurerm_storage_account.example || terraform import azurerm_storage_account.example "/subscriptions/${{ env.ARM_SUBSCRIPTION_ID }}/resourceGroups/${{ env.TF_RESOURCE_GROUP_NAME }}/providers/Microsoft.Storage/storageAccounts/${{ secrets.TF_STORAGE_ACCOUNT_NAME }}" || true
          # Import Storage Container if it exists
          terraform state show azurerm_storage_container.rows || terraform import azurerm_storage_container.rows "https://${{ secrets.TF_STORAGE_ACCOUNT_NAME }}.blob.core.windows.net/rows" || true
          # Import Data Lake Gen2 Filesystem if it exists
          terraform state show azurerm_storage_data_lake_gen2_filesystem.rows || terraform import azurerm_storage_data_lake_gen2_filesystem.rows "/subscriptions/${{ env.ARM_SUBSCRIPTION_ID }}/resourceGroups/${{ env.TF_RESOURCE_GROUP_NAME }}/providers/Microsoft.Storage/storageAccounts/${{ secrets.TF_STORAGE_ACCOUNT_NAME }}/fileServices/default/filesystems/rows" || true
          # Import Data Lake Gen2 Paths if they exist
          terraform state show azurerm_storage_data_lake_gen2_path.raw || terraform import azurerm_storage_data_lake_gen2_path.raw "/subscriptions/${{ env.ARM_SUBSCRIPTION_ID }}/resourceGroups/${{ env.TF_RESOURCE_GROUP_NAME }}/providers/Microsoft.Storage/storageAccounts/${{ secrets.TF_STORAGE_ACCOUNT_NAME }}/fileServices/default/filesystems/rows/directory/RAW" || true
          terraform state show azurerm_storage_data_lake_gen2_path.silver || terraform import azurerm_storage_data_lake_gen2_path.silver "/subscriptions/${{ env.ARM_SUBSCRIPTION_ID }}/resourceGroups/${{ env.TF_RESOURCE_GROUP_NAME }}/providers/Microsoft.Storage/storageAccounts/${{ secrets.TF_STORAGE_ACCOUNT_NAME }}/fileServices/default/filesystems/rows/directory/SILVER" || true
          terraform state show azurerm_storage_data_lake_gen2_path.gold || terraform import azurerm_storage_data_lake_gen2_path.gold "/subscriptions/${{ env.ARM_SUBSCRIPTION_ID }}/resourceGroups/${{ env.TF_RESOURCE_GROUP_NAME }}/providers/Microsoft.Storage/storageAccounts/${{ secrets.TF_STORAGE_ACCOUNT_NAME }}/fileServices/default/filesystems/rows/directory/GOLD" || true
          # Add similar import logic for other resources as needed

      - name: Terraform Plan
        run: |
          docker run --rm \
            -e ARM_CLIENT_ID \
            -e ARM_CLIENT_SECRET \
            -e ARM_SUBSCRIPTION_ID \
            -e ARM_TENANT_ID \
            -v ${{ github.workspace }}/environments/${{ matrix.env_folder }}:/src \
            -v ${{ github.workspace }}/tfstate:/workspace \
            -w /workspace \
            hashicorp/terraform:latest -chdir=/src plan -input=false -out=tfplan \
            -var 'resource_group_name=${{ secrets.TF_RESOURCE_GROUP_NAME }}' \
            -var 'location=${{ secrets.TF_LOCATION }}' \
            -var 'storage_account_name=${{ secrets.TF_STORAGE_ACCOUNT_NAME }}' \
            -var 'storage_account_tier=Standard' \
            -var 'storage_account_replication_type=LRS' \
            -var 'key_vault_name=${{ secrets.TF_KEY_VAULT_NAME }}' \
            -var 'key_vault_tenant_id=${{ secrets.TF_TENANT_ID }}' \
            -var 'key_vault_sku_name=standard' \
            -var 'key_vault_soft_delete_retention_days=7' \
            -var 'key_vault_purge_protection_enabled=true' \
            -var 'app_service_plan_name=${{ secrets.TF_APP_SERVICE_PLAN_NAME }}' \
            -var 'app_service_plan_os_type=Linux' \
            -var 'app_service_plan_sku_name=P1v2' \
            -var 'web_app_name=${{ secrets.TF_WEB_APP_NAME }}' \
            -var 'web_app_kind=webapp' \
            -var 'web_app_os_type=Linux'

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          docker run --rm \
            -e ARM_CLIENT_ID \
            -e ARM_CLIENT_SECRET \
            -e ARM_SUBSCRIPTION_ID \
            -e ARM_TENANT_ID \
            -v ${{ github.workspace }}/environments/${{ matrix.env_folder }}:/src \
            -v ${{ github.workspace }}/tfstate:/workspace \
            -w /workspace \
            hashicorp/terraform:latest -chdir=/src apply -input=false -auto-approve tfplan

      - name: Upload Terraform Plan as Artifact (optional)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: tfplan
