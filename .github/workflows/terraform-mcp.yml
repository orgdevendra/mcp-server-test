name: Terraform MCP Server CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  terraform:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        env_folder: [dev] # Add 'prod' to this list to deploy prod as well
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      TF_RESOURCE_GROUP_NAME: ${{ secrets.TF_RESOURCE_GROUP_NAME }}
      TF_LOCATION: ${{ secrets.TF_LOCATION }}
      TF_STORAGE_ACCOUNT_NAME: ${{ secrets.TF_STORAGE_ACCOUNT_NAME }}
      TF_KEY_VAULT_NAME: ${{ secrets.TF_KEY_VAULT_NAME }}
      TF_KEY_VAULT_TENANT_ID: ${{ secrets.TF_KEY_VAULT_TENANT_ID }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Prepare Terraform State Directory
        run: mkdir -p ${{ github.workspace }}/tfstate

      - name: Terraform Init
        run: |
          docker run --rm \
            -e ARM_CLIENT_ID \
            -e ARM_CLIENT_SECRET \
            -e ARM_SUBSCRIPTION_ID \
            -e ARM_TENANT_ID \
            -v ${{ github.workspace }}:/workspace \
            -w /workspace/environments/${{ matrix.env_folder }} \
            hashicorp/terraform:latest init -input=false

      - name: Terraform Import Resource Group
        run: |
          docker run --rm \
            -e ARM_CLIENT_ID \
            -e ARM_CLIENT_SECRET \
            -e ARM_SUBSCRIPTION_ID \
            -e ARM_TENANT_ID \
            -v ${{ github.workspace }}:/workspace \
            -w /workspace/environments/${{ matrix.env_folder }} \
            hashicorp/terraform:latest import 'module.resource_group.azurerm_resource_group.this' "/subscriptions/${{ secrets.ARM_SUBSCRIPTION_ID }}/resourceGroups/${{ secrets.TF_RESOURCE_GROUP_NAME }}"

      - name: Terraform Plan
        run: |
          docker run --rm \
            -e ARM_CLIENT_ID \
            -e ARM_CLIENT_SECRET \
            -e ARM_SUBSCRIPTION_ID \
            -e ARM_TENANT_ID \
            -v ${{ github.workspace }}:/workspace \
            -w /workspace/environments/${{ matrix.env_folder }} \
            hashicorp/terraform:latest plan -input=false -out=tfplan \
            -var 'subscription_id=${{ secrets.ARM_SUBSCRIPTION_ID }}' \
            -var 'resource_group_name=${{ secrets.TF_RESOURCE_GROUP_NAME }}' \
            -var 'location=${{ secrets.TF_LOCATION }}' \
            -var 'storage_account_name=${{ secrets.TF_STORAGE_ACCOUNT_NAME }}' \
            -var 'storage_account_tier=Standard' \
            -var 'storage_account_replication_type=LRS' \
            -var 'key_vault_name=${{ secrets.TF_KEY_VAULT_NAME }}' \
            -var 'key_vault_tenant_id=${{ secrets.TF_KEY_VAULT_TENANT_ID }}' \
            -var 'key_vault_sku_name=standard' \
            -var 'key_vault_soft_delete_retention_days=7' \
            -var 'key_vault_purge_protection_enabled=true'

      - name: Terraform Apply
        run: |
          docker run --rm \
            -e ARM_CLIENT_ID \
            -e ARM_CLIENT_SECRET \
            -e ARM_SUBSCRIPTION_ID \
            -e ARM_TENANT_ID \
            -v ${{ github.workspace }}:/workspace \
            -w /workspace/environments/${{ matrix.env_folder }} \
            hashicorp/terraform:latest apply -input=false -auto-approve tfplan

      - name: Upload Terraform Plan as Artifact (optional)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: environments/${{ matrix.env_folder }}/tfplan
